{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Connor\\\\Documents\\\\Atom Projects\\\\HTML CSS\\\\mktest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Connor\\\\Documents\\\\Atom Projects\\\\HTML CSS\\\\mktest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Connor\\\\Documents\\\\Atom Projects\\\\HTML CSS\\\\mktest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Connor\\\\Documents\\\\Atom Projects\\\\HTML CSS\\\\mktest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Connor\\\\Documents\\\\Atom Projects\\\\HTML CSS\\\\mktest\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Connor\\\\Documents\\\\Atom Projects\\\\HTML CSS\\\\mktest\\\\src\\\\components\\\\QuestionInput.jsx\";\nimport React, { Component } from 'react';\nimport { Input, InputNumber, Tooltip, Divider, Form } from 'antd';\nimport VariableForm from './VariableForm';\nimport VariablePicker from './VariablePicker';\n\nvar QuestionInput =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(QuestionInput, _Component);\n\n  function QuestionInput(props) {\n    var _this;\n\n    _classCallCheck(this, QuestionInput);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(QuestionInput).call(this, props));\n\n    _this.handleChange = function (event) {\n      var value = event.target.value;\n\n      _this.setState({\n        value: value\n      });\n\n      _this.parseVariables(value);\n    };\n\n    _this.state = {\n      value: '',\n      variables: []\n    };\n    return _this;\n  }\n\n  _createClass(QuestionInput, [{\n    key: \"parseVariables\",\n    value: function parseVariables(value) {\n      var variableRegex = /\\{.*?\\}/g;\n      var matches = value.match(variableRegex);\n\n      if (matches) {\n        var counter = 0;\n        matches = matches.map(function (m) {\n          counter++;\n          return {\n            name: m,\n            key: counter - 1\n          };\n        });\n        this.setState({\n          variables: matches\n        });\n      }\n    }\n  }, {\n    key: \"createVariable\",\n    value: function createVariable(item) {\n      item = item.replace(\"{\", \"\");\n      item = item.replace(\"}\", \"\");\n      return React.createElement(VariableForm, {\n        name: item.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var variables = this.state.variables;\n      console.log(variables);\n      variables = variables.map(function (v) {\n        return _this2.createVariable(v);\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: this.state.value,\n        onChange: function onChange(event) {\n          return _this2.handleChange(event);\n        },\n        onBlur: function onBlur(event) {\n          return _this2.handleChange(event);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }), React.createElement(Form, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, variables));\n    }\n  }]);\n\n  return QuestionInput;\n}(Component);\n\nexport default QuestionInput;","map":{"version":3,"sources":["C:\\Users\\Connor\\Documents\\Atom Projects\\HTML CSS\\mktest\\src\\components\\QuestionInput.jsx"],"names":["React","Component","Input","InputNumber","Tooltip","Divider","Form","VariableForm","VariablePicker","QuestionInput","props","handleChange","event","value","target","setState","parseVariables","state","variables","variableRegex","matches","match","counter","map","m","name","key","item","replace","console","log","v","createVariable"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,WAAhB,EAA6BC,OAA7B,EAAsCC,OAAtC,EAA+CC,IAA/C,QAA2D,MAA3D;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;IAEMC,a;;;;;AACJ,yBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AAChB,uFAAMA,KAAN;;AADgB,UAQlBC,YARkB,GAQH,UAAAC,KAAK,EAAI;AAAA,UAChBC,KADgB,GACND,KAAK,CAACE,MADA,CAChBD,KADgB;;AAEtB,YAAKE,QAAL,CAAc;AAAEF,QAAAA,KAAK,EAALA;AAAF,OAAd;;AACA,YAAKG,cAAL,CAAoBH,KAApB;AACD,KAZiB;;AAEhB,UAAKI,KAAL,GAAa;AACXJ,MAAAA,KAAK,EAAE,EADI;AAEXK,MAAAA,SAAS,EAAE;AAFA,KAAb;AAFgB;AAMjB;;;;mCAQcL,K,EAAO;AACpB,UAAIM,aAAa,GAAG,UAApB;AACA,UAAIC,OAAO,GAAGP,KAAK,CAACQ,KAAN,CAAYF,aAAZ,CAAd;;AACA,UAAIC,OAAJ,EAAY;AACV,YAAIE,OAAO,GAAG,CAAd;AACAF,QAAAA,OAAO,GAAGA,OAAO,CAACG,GAAR,CAAY,UAAAC,CAAC,EAAI;AACvBF,UAAAA,OAAO;AACP,iBACE;AACEG,YAAAA,IAAI,EAAED,CADR;AAEEE,YAAAA,GAAG,EAAEJ,OAAO,GAAC;AAFf,WADF;AAKH,SAPS,CAAV;AAQA,aAAKP,QAAL,CAAc;AAAEG,UAAAA,SAAS,EAAEE;AAAb,SAAd;AACD;AACF;;;mCAEcO,I,EAAM;AACnBA,MAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,GAAb,EAAkB,EAAlB,CAAP;AACAD,MAAAA,IAAI,GAAGA,IAAI,CAACC,OAAL,CAAa,GAAb,EAAkB,EAAlB,CAAP;AACA,aACE,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAGD,IAAI,CAACF,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGD;;;6BAEQ;AAAA;;AAAA,UACDP,SADC,GACa,KAAKD,KADlB,CACDC,SADC;AAEPW,MAAAA,OAAO,CAACC,GAAR,CAAYZ,SAAZ;AACAA,MAAAA,SAAS,GAAGA,SAAS,CAACK,GAAV,CAAc,UAAAQ,CAAC;AAAA,eAAI,MAAI,CAACC,cAAL,CAAoBD,CAApB,CAAJ;AAAA,OAAf,CAAZ;AACA,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AACE,QAAA,KAAK,EAAG,KAAKd,KAAL,CAAWJ,KADrB;AAEE,QAAA,QAAQ,EAAE,kBAAAD,KAAK;AAAA,iBAAI,MAAI,CAACD,YAAL,CAAkBC,KAAlB,CAAJ;AAAA,SAFjB;AAGE,QAAA,MAAM,EAAE,gBAAAA,KAAK;AAAA,iBAAI,MAAI,CAACD,YAAL,CAAkBC,KAAlB,CAAJ;AAAA,SAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGM,SADH,CANF,CADF;AAaD;;;;EAzDyBjB,S;;AA4D5B,eAAeQ,aAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Input, InputNumber, Tooltip, Divider, Form } from 'antd';\r\nimport VariableForm from './VariableForm'\r\nimport VariablePicker from './VariablePicker'\r\n\r\nclass QuestionInput extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      value: '',\r\n      variables: [],\r\n    };\r\n  }\r\n\r\n  handleChange = event => {\r\n    let { value } = event.target;\r\n    this.setState({ value });\r\n    this.parseVariables(value);\r\n  }\r\n\r\n  parseVariables(value) {\r\n    let variableRegex = /\\{.*?\\}/g;\r\n    let matches = value.match(variableRegex);\r\n    if (matches){\r\n      let counter = 0;\r\n      matches = matches.map(m => {\r\n          counter++;\r\n          return (\r\n            {\r\n              name: m,\r\n              key: counter-1,\r\n            });\r\n      })\r\n      this.setState({ variables: matches })\r\n    }\r\n  }\r\n\r\n  createVariable(item) {\r\n    item = item.replace(\"{\", \"\");\r\n    item = item.replace(\"}\", \"\");\r\n    return (\r\n      <VariableForm name={ item.name } />\r\n    )\r\n  }\r\n\r\n  render() {\r\n    let { variables } = this.state;\r\n    console.log(variables)\r\n    variables = variables.map(v => this.createVariable(v));\r\n    return (\r\n      <div>\r\n        <Input\r\n          value={ this.state.value }\r\n          onChange={event => this.handleChange(event) }\r\n          onBlur={event => this.handleChange(event) }\r\n          />\r\n        <Form>\r\n          {variables}\r\n        </Form>\r\n      </div>\r\n\r\n    )\r\n  };\r\n}\r\n\r\nexport default QuestionInput;\r\n"]},"metadata":{},"sourceType":"module"}